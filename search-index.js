var searchIndex = JSON.parse('{\
"horde":{"doc":"This crate contains [SyncTable] and [SyncPushVec] which …","t":[0,0,0,3,11,11,11,11,5,5,11,11,5,5,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["collect","sync_push_vec","sync_table","Pin","borrow","borrow_mut","clone","clone_into","collect","defer_unchecked","from","into","pin","release","to_owned","try_from","try_into","type_id","LockedWrite","Read","SyncPushVec","Write","as_mut_slice","as_slice","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clone","clone_into","default","deref","deref_mut","drop","extend","extend_one","extend_reserve","from","from","from","from","from_iter","into","into","into","into","len","lock","lock_from_guard","mutex","new","push","read","read","replace","reserve","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unsafe_write","with_capacity","write","DefaultHashBuilder","Iter","LockedWrite","PotentialSlot","Read","SyncTable","Write","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref_mut","drop","fmt","from","from","from","from","from","from","from_iter","get","get","get_mut","get_potential","get_with_eq","hash_key","hasher","hasher","insert","insert_new","insert_new","insert_new_unchecked","into","into","into","into","into","into","into_iter","iter","len","lock","lock_from_guard","mutex","new","new_with","next","read","read","refresh","remove","replace","reserve_one","shard_index_by_hash","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_insert_new","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unsafe_write","write"],"q":["horde","","","horde::collect","","","","","","","","","","","","","","","horde::sync_push_vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","horde::sync_table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An API for quiescent state based reclamation.","A contiguous push-only array type with lock-free reads.","A hash table with lock-free reads.","Represents a proof that no deferred methods will run for …","","","","","Signals a quiescent state where garbage may be collected.","This schedules a closure to run at some point after all …","","","Marks the current thread as pinned and returns a proof of …","Removes the current thread from the threads allowed to …","","","","","A handle to a [SyncPushVec] with write access protected …","A handle to a [SyncPushVec] with read access.","A contiguous push-only array type with lock-free reads.","A handle to a [SyncPushVec] with write access.","Extracts a mutable slice of the entire vector.","Extracts a slice containing the entire vector.","","","","","","","","","Returns the number of elements the map can hold without …","","","","","","","","","","","","","","","","","","","Returns the number of elements in the table.","Creates a [LockedWrite] handle by taking the underlying …","Creates a [LockedWrite] handle from a guard protecting …","Gets a reference to the underlying mutex that protects …","Constructs a new, empty vector with zero capacity.","Inserts a new element into the end of the table, and …","Creates a [Read] handle which gives access to read …","Creates a [Read] handle from a pinned region.","Replaces the content of the vector with the content of …","Reserves capacity for at least <code>additional</code> more elements …","","","","","","","","","","","","","","Creates a [Write] handle without checking for exclusive …","Constructs a new, empty vector with the specified …","Creates a [Write] handle from a mutable reference.","Default hash builder for [SyncTable].","An iterator over the entries of a <code>HashMap</code>.","A handle to a [SyncTable] with write access protected by …","Represents where a value would be if inserted.","A handle to a [SyncTable] with read access.","A hash table with lock-free reads.","A handle to a [SyncTable] with write access.","","","","","","","","","","","","","Returns the number of elements the map can hold without …","","","","","","","","","","","","","","","","","","","","","Gets a reference to an element in the table.","Gets a reference to an element in the table.","Gets a mutable reference to an element in the table.","Gets a reference to an element in the table or a …","Gets a reference to an element in the table with a custom …","Hashes a key with the table’s hasher.","Returns a reference to the table’s <code>BuildHasher</code>.","Returns a reference to the table’s <code>BuildHasher</code>.","Inserts a element into the table. Returns <code>false</code> if it …","Inserts a new element into the table, and returns a …","Inserts a new element into the table, and returns a …","Inserts a new element into the table, and returns a …","","","","","","","","An iterator visiting all key-value pairs in arbitrary …","Returns the number of elements in the table.","Creates a [LockedWrite] handle by taking the underlying …","Creates a [LockedWrite] handle from a guard protecting …","Gets a reference to the underlying mutex that protects …","Creates an empty [SyncTable].","Creates an empty [SyncTable] with the specified capacity, …","","Creates a [Read] handle which gives access to read …","Creates a [Read] handle from a pinned region.","Returns a new up-to-date potential slot. This can be …","Removes an element from the table, and returns a …","Replaces the content of the table with the content of the …","Reserve room for one more element.","Get a suitable shard index from a hash when sharding the …","","","","","","","","","","","Inserts a new element into the table, and returns a …","","","","","","","","","","","","","Creates a [Write] handle without checking for exclusive …","Creates a [Write] handle from a mutable reference."],"i":[0,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,2,3,3,4,5,2,3,4,5,2,3,3,3,2,5,5,2,4,4,4,3,4,5,2,2,3,4,5,2,3,2,2,2,2,4,4,2,4,4,3,3,4,5,2,3,4,5,2,3,4,5,2,2,2,2,0,0,0,0,0,0,0,6,7,8,9,10,11,6,7,8,9,10,11,6,6,9,10,11,6,9,10,11,9,8,8,9,10,6,7,8,9,10,11,9,6,11,9,6,6,9,7,9,7,7,11,11,6,7,8,9,10,11,10,6,6,9,9,9,9,9,10,7,9,11,7,7,7,0,6,9,10,11,6,7,8,9,10,11,11,6,7,8,9,10,11,6,7,8,9,10,11,9,9],"f":[null,null,null,null,[[]],[[]],[[],["pin",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["lockedwrite",3]],[[["mutexguard",6]],["lockedwrite",3]],[[],["mutex",6]],[[]],[[]],[[],["read",3]],[[["pin",3]],["read",3]],[[["usize",15],["intoiterator",8]]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["write",3]],[[["usize",15]]],[[],["write",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["synctable",3]],[[]],[[],["potentialslot",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["u64",15],["option",4]],["option",4]],[[["read",3],["buildhasher",8],["option",4],["u64",15]],["option",4]],[[["u64",15],["option",4]],["option",4]],[[["u64",15],["option",4]],[["result",4],["potentialslot",3]]],[[["u64",15]],["option",4]],[[],["u64",15]],[[]],[[]],[[["u64",15],["option",4]],["bool",15]],[[["u64",15],["option",4]]],[[["option",4],["hash",8],["write",3],["clone",8],["send",8],["u64",15]]],[[["hash",8],["write",3],["option",4],["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["iter",3]],[[],["usize",15]],[[],["lockedwrite",3]],[[["mutexguard",6]],["lockedwrite",3]],[[],["mutex",6]],[[]],[[["usize",15]]],[[],["option",4]],[[],["read",3]],[[["pin",3]],["read",3]],[[["buildhasher",8],["option",4],["read",3],["u64",15]],[["result",4],["potentialslot",3]]],[[["u64",15],["option",4]],["option",4]],[[["usize",15],["intoiterator",8]]],[[]],[[["usize",15],["u64",15]],["usize",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["hash",8],["write",3],["option",4],["u64",15]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["write",3]],[[],["write",3]]],"p":[[3,"Pin"],[3,"SyncPushVec"],[3,"Read"],[3,"Write"],[3,"LockedWrite"],[3,"Read"],[3,"Write"],[3,"LockedWrite"],[3,"SyncTable"],[3,"Iter"],[3,"PotentialSlot"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};